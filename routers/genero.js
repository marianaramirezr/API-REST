const express = require('express');
const router = express.Router();
const Genero = require('../models/Genero'); // ‚úÖ Importa correctamente el modelo de G√©nero

// üìå Obtener todos los g√©neros
router.get('/', (req, res) => {
    Genero.getAll((err, results) => {
        if (err) {
            console.error('‚ùå Error al obtener los g√©neros:', err);
            return res.status(500).json({ error: 'Error al obtener los g√©neros', details: err });
        }
        res.json(results);
    });
});

// üìå Obtener un g√©nero por ID
router.get('/:id', (req, res) => {
    const { id } = req.params;
    console.log(`üîç Buscando g√©nero con ID: ${id}`);

    Genero.getById(id, (err, genero) => {
        if (err) {
            console.error('‚ùå Error en la consulta:', err);
            return res.status(500).json({ error: 'Error en el servidor', details: err });
        }

        if (!genero) {
            console.warn(`‚ö†Ô∏è G√©nero con ID ${id} no encontrado.`);
            return res.status(404).json({ error: 'G√©nero no encontrado' });
        }

        console.log(`‚úÖ G√©nero encontrado:`, genero);
        res.json(genero);
    });
});

// üìå Crear un nuevo g√©nero
router.post('/', (req, res) => {
    const { nombre } = req.body;
    if (!nombre) {
        return res.status(400).json({ error: 'El nombre del g√©nero es obligatorio' });
    }

    Genero.create(nombre, (err, results) => {
        if (err) {
            console.error('‚ùå Error al crear el g√©nero:', err);
            return res.status(500).json({ error: 'Error al crear el g√©nero', details: err });
        }
        console.log('‚úÖ G√©nero creado con √©xito, ID:', results.insertId);
        res.json({ message: 'G√©nero creado con √©xito', id: results.insertId });
    });
});

// üìå Actualizar un g√©nero por ID
router.put('/:id', (req, res) => {
    const { id } = req.params;
    const { nombre } = req.body;
    if (!nombre) {
        return res.status(400).json({ error: 'El nombre del g√©nero es obligatorio' });
    }

    Genero.update(id, nombre, (err, results) => {
        if (err) {
            console.error('‚ùå Error al actualizar el g√©nero:', err);
            return res.status(500).json({ error: 'Error al actualizar el g√©nero', details: err });
        }
        if (results.affectedRows === 0) {
            console.warn(`‚ö†Ô∏è No se encontr√≥ un g√©nero con ID ${id} para actualizar.`);
            return res.status(404).json({ error: 'G√©nero no encontrado' });
        }
        console.log(`‚úÖ G√©nero con ID ${id} actualizado con √©xito.`);
        res.json({ message: 'G√©nero actualizado con √©xito' });
    });
});

// üìå Eliminar un g√©nero por ID
router.delete('/:id', (req, res) => {
    const { id } = req.params;

    Genero.delete(id, (err, results) => {
        if (err) {
            console.error('‚ùå Error al eliminar el g√©nero:', err);
            return res.status(500).json({ error: 'Error al eliminar el g√©nero', details: err });
        }
        if (results.affectedRows === 0) {
            console.warn(`‚ö†Ô∏è No se encontr√≥ un g√©nero con ID ${id} para eliminar.`);
            return res.status(404).json({ error: 'G√©nero no encontrado' });
        }
        console.log(`‚úÖ G√©nero con ID ${id} eliminado con √©xito.`);
        res.json({ message: 'G√©nero eliminado con √©xito' });
    });
});

module.exports = router;
