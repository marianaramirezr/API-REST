const express = require('express');
const router = express.Router();
const Media = require('../models/Media');

// üìå Crear pel√≠cula con imagen por URL
router.post('/', async (req, res) => {
    try {
        console.log("üì• Datos recibidos en POST /media:", req.body);
        const { titulo, imagen, director_id, genero_id, productora_id, tipo_id } = req.body;

        if (!titulo || !imagen || isNaN(director_id) || isNaN(genero_id) || isNaN(productora_id) || isNaN(tipo_id)) {
            return res.status(400).json({ error: "Todos los campos son obligatorios y deben ser n√∫meros v√°lidos" });
        }

        const newMovie = await Media.create({
            titulo,
            imagen,
            director_id: parseInt(director_id),
            genero_id: parseInt(genero_id),
            productora_id: parseInt(productora_id),
            tipo_id: parseInt(tipo_id)
        });

        res.status(201).json(newMovie);
    } catch (error) {
        console.error("‚ùå Error al insertar pel√≠cula:", error);
        res.status(500).json({ error: error.message });
    }
});

// üìå Obtener todas las pel√≠culas (CORREGIDO)
router.get('/', async (req, res) => {
    try {
        const peliculas = await Media.getAll(); // ‚úÖ Se usa getAll() en lugar de findAll()
        res.json(peliculas);
    } catch (error) {
        console.error("‚ùå Error al obtener pel√≠culas:", error);
        res.status(500).json({ error: error.message });
    }
});

// üìå Obtener una pel√≠cula por ID (CORREGIDO)
router.get('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        if (isNaN(id)) return res.status(400).json({ error: "ID inv√°lido" });

        const pelicula = await Media.getById(id); // ‚úÖ Se usa getById() en lugar de findByPk()
        if (!pelicula) return res.status(404).json({ error: "Pel√≠cula no encontrada" });

        res.json(pelicula);
    } catch (error) {
        console.error("‚ùå Error al buscar pel√≠cula:", error);
        res.status(500).json({ error: error.message });
    }
});

// üìå Actualizar una pel√≠cula/serie por ID
router.put('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { titulo, imagen, director_id, genero_id, productora_id, tipo_id } = req.body;

        if (isNaN(id) || !titulo || !imagen || isNaN(director_id) || isNaN(genero_id) || isNaN(productora_id) || isNaN(tipo_id)) {
            return res.status(400).json({ error: "Todos los campos son obligatorios y deben ser n√∫meros v√°lidos" });
        }

        const result = await Media.update(id, {
            titulo,
            imagen,
            director_id: parseInt(director_id),
            genero_id: parseInt(genero_id),
            productora_id: parseInt(productora_id),
            tipo_id: parseInt(tipo_id)
        });

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "Pel√≠cula no encontrada" });
        }

        res.json({ message: 'Pel√≠cula actualizada con √©xito' });
    } catch (error) {
        console.error("‚ùå Error al actualizar pel√≠cula:", error);
        res.status(500).json({ error: error.message });
    }
});

// üìå Eliminar una pel√≠cula/serie por ID (CORREGIDO)
router.delete('/:id', async (req, res) => {
    try {
        const { id } = req.params;
        if (isNaN(id)) return res.status(400).json({ error: "ID inv√°lido" });

        const result = await Media.delete(id); // ‚úÖ Se usa delete() en lugar de findByPk() y destroy()
        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "Pel√≠cula no encontrada" });
        }

        res.json({ message: 'Pel√≠cula eliminada con √©xito' });
    } catch (error) {
        console.error("‚ùå Error al eliminar pel√≠cula:", error);
        res.status(500).json({ error: error.message });
    }
});

module.exports = router;
