const express = require('express');
const router = express.Router();
const Director = require('../models/Director'); // ‚úÖ Importa el modelo correctamente

// üìå Obtener todos los directores
router.get('/', (req, res) => {
    Director.getAll((err, results) => {
        if (err) {
            console.error('‚ùå Error al obtener los directores:', err);
            return res.status(500).json({ error: 'Error al obtener los directores', details: err });
        }
        res.json(results);
    });
});

// üìå Obtener un director por ID (con logs para depuraci√≥n)
router.get('/:id', (req, res) => {
    const { id } = req.params;
    console.log(`üîç Buscando director con ID: ${id}`); // üëÄ Log para verificar la entrada

    Director.getById(id, (err, director) => {
        if (err) {
            console.error('‚ùå Error en la consulta:', err);
            return res.status(500).json({ error: 'Error en el servidor', details: err });
        }

        if (!director) {
            console.warn(`‚ö†Ô∏è Director con ID ${id} no encontrado.`);
            return res.status(404).json({ error: 'Director no encontrado' });
        }

        console.log(`‚úÖ Director encontrado:`, director);
        res.json(director);
    });
});

// üìå Crear un nuevo director
router.post('/', (req, res) => {
    const { nombre } = req.body;
    if (!nombre) {
        return res.status(400).json({ error: 'El nombre del director es obligatorio' });
    }

    Director.create(nombre, (err, results) => {
        if (err) {
            console.error('‚ùå Error al crear el director:', err);
            return res.status(500).json({ error: 'Error al crear el director', details: err });
        }
        console.log('‚úÖ Director creado con √©xito, ID:', results.insertId);
        res.json({ message: 'Director creado con √©xito', id: results.insertId });
    });
});

// üìå Actualizar un director por ID
router.put('/:id', (req, res) => {
    const { id } = req.params;
    const { nombre } = req.body;
    if (!nombre) {
        return res.status(400).json({ error: 'El nombre del director es obligatorio' });
    }

    Director.update(id, nombre, (err, results) => {
        if (err) {
            console.error('‚ùå Error al actualizar el director:', err);
            return res.status(500).json({ error: 'Error al actualizar el director', details: err });
        }
        if (results.affectedRows === 0) {
            console.warn(`‚ö†Ô∏è No se encontr√≥ un director con ID ${id} para actualizar.`);
            return res.status(404).json({ error: 'Director no encontrado' });
        }
        console.log(`‚úÖ Director con ID ${id} actualizado con √©xito.`);
        res.json({ message: 'Director actualizado con √©xito' });
    });
});

// üìå Eliminar un director por ID
router.delete('/:id', (req, res) => {
    const { id } = req.params;

    Director.delete(id, (err, results) => {
        if (err) {
            console.error('‚ùå Error al eliminar el director:', err);
            return res.status(500).json({ error: 'Error al eliminar el director', details: err });
        }
        if (results.affectedRows === 0) {
            console.warn(`‚ö†Ô∏è No se encontr√≥ un director con ID ${id} para eliminar.`);
            return res.status(404).json({ error: 'Director no encontrado' });
        }
        console.log(`‚úÖ Director con ID ${id} eliminado con √©xito.`);
        res.json({ message: 'Director eliminado con √©xito' });
    });
});

module.exports = router;